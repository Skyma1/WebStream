/**
 * Store –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è–º–∏
 */

import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { useToast } from 'vue-toastification'
import apiService from '@/services/api'
import socketService from '@/services/socket'

export const useStreamStore = defineStore('stream', () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const streams = ref([])
  const currentStream = ref(null)
  const chatMessages = ref([])
  const streamUsers = ref([])
  const isLoading = ref(false)
  const isStreaming = ref(false)
  const viewerCount = ref(0)

  // –ì–µ—Ç—Ç–µ—Ä—ã
  const activeStreams = computed(() => 
    streams.value // API —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
  )

  const currentStreamMessages = computed(() => 
    chatMessages.value.filter(message => 
      !currentStream.value || message.stream_id === currentStream.value.id
    )
  )

  const onlineUsers = computed(() => 
    streamUsers.value.filter(user => user.isOnline)
  )

  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è–º–∏
  const fetchStreams = async () => {
    try {
      isLoading.value = true
      const response = await apiService.get('/streams')
      streams.value = response.data
      return response.data
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π:', error)
      const toast = useToast()
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π')
      throw error
    } finally {
      isLoading.value = false
    }
  }

  const fetchStream = async (streamId) => {
    try {
      isLoading.value = true
      const response = await apiService.get(`/streams/${streamId}`)
      currentStream.value = response.data
      return response.data
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏:', error)
      const toast = useToast()
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏')
      throw error
    } finally {
      isLoading.value = false
    }
  }

  const createStream = async (streamData) => {
    try {
      isLoading.value = true
      const response = await apiService.post('/streams', streamData)
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤ —Å–ø–∏—Å–æ–∫
      streams.value.unshift(response.data)
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤ localStorage
      saveActiveStream(response.data)
      
      const toast = useToast()
      toast.success('–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞')
      
      return response.data
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏:', error)
      const toast = useToast()
      const errorMessage = error.response?.data?.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏'
      toast.error(errorMessage)
      throw error
    } finally {
      isLoading.value = false
    }
  }

  const endStream = async (streamId) => {
    try {
      isLoading.value = true
      await apiService.patch(`/streams/${streamId}/end`)
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
      const streamIndex = streams.value.findIndex(s => s.id === streamId)
      if (streamIndex !== -1) {
        streams.value[streamIndex].is_active = false
        streams.value[streamIndex].ended_at = new Date().toISOString()
      }
      
      if (currentStream.value && currentStream.value.id === streamId) {
        currentStream.value.is_active = false
        currentStream.value.ended_at = new Date().toISOString()
        // –û—á–∏—â–∞–µ–º localStorage –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
        clearActiveStream()
      }
      
      const toast = useToast()
      toast.success('–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
      
      return true
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏:', error)
      const toast = useToast()
      const errorMessage = error.response?.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏'
      toast.error(errorMessage)
      throw error
    } finally {
      isLoading.value = false
    }
  }

  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–æ–º
  const fetchChatMessages = async (streamId, limit = 50) => {
    try {
      const response = await apiService.get(`/streams/${streamId}/chat`, {
        params: { limit }
      })
      return response.data
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞:', error)
      throw error
    }
  }

  const setChatHistory = (messages) => {
    chatMessages.value = messages
  }

  const addChatMessage = (message) => {
    console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞:', message)
    chatMessages.value.push(message)
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
    if (chatMessages.value.length > 1000) {
      chatMessages.value = chatMessages.value.slice(-500)
    }
    
    console.log('üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ:', chatMessages.value.length)
  }

  const sendChatMessage = (streamId, message) => {
    if (!message || message.trim().length === 0) {
      const toast = useToast()
      toast.error('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
      return
    }

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é', streamId, ':', message)
    socketService.sendChatMessage(streamId, message)
  }

  const sendSystemMessage = (streamId, message) => {
    socketService.sendSystemMessage(streamId, message)
  }

  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  const addUserToStream = (user) => {
    const existingUserIndex = streamUsers.value.findIndex(u => u.id === user.id)
    if (existingUserIndex !== -1) {
      streamUsers.value[existingUserIndex] = { ...user, isOnline: true }
    } else {
      streamUsers.value.push({ ...user, isOnline: true })
    }
  }

  const removeUserFromStream = (userId) => {
    const userIndex = streamUsers.value.findIndex(u => u.id === userId)
    if (userIndex !== -1) {
      streamUsers.value[userIndex].isOnline = false
    }
  }

  const clearStreamUsers = () => {
    streamUsers.value = []
  }

  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è WebRTC
  const startStreaming = () => {
    isStreaming.value = true
  }

  const stopStreaming = () => {
    isStreaming.value = false
  }

  const updateViewerCount = (count) => {
    viewerCount.value = count
  }

  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
  const joinStream = (streamId) => {
    console.log('üîç joinStream –≤—ã–∑–≤–∞–Ω –¥–ª—è streamId:', streamId)
    console.log('üîç currentStream.value:', currentStream.value)
    
    if (currentStream.value && currentStream.value.id === streamId) {
      console.log('–£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç—Ç–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏, –Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ WebSocket –∫–æ–º–Ω–∞—Ç–µ')
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ WebSocket –∫–æ–º–Ω–∞—Ç–µ
      socketService.joinStream(streamId)
      return
    }

    // –ü–æ–∫–∏–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
    if (currentStream.value) {
      leaveStream(currentStream.value.id)
    }

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
    socketService.joinStream(streamId)
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
    fetchStream(streamId)
  }

  const leaveStream = (streamId) => {
    socketService.leaveStream(streamId)
    
    if (currentStream.value && currentStream.value.id === streamId) {
      currentStream.value = null
      chatMessages.value = []
      clearStreamUsers()
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
  const clearCurrentStream = () => {
    currentStream.value = null
    chatMessages.value = []
    clearStreamUsers()
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const clearState = () => {
    streams.value = []
    currentStream.value = null
    chatMessages.value = []
    streamUsers.value = []
    isStreaming.value = false
    viewerCount.value = 0
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
  const saveActiveStream = (stream) => {
    try {
      localStorage.setItem('activeStream', JSON.stringify(stream))
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è:', stream.id)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤ localStorage:', error)
    }
  }

  const getActiveStream = () => {
    try {
      const saved = localStorage.getItem('activeStream')
      if (saved) {
        const stream = JSON.parse(saved)
        console.log('üìÇ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∏–∑ localStorage:', stream.id)
        return stream
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –∏–∑ localStorage:', error)
    }
    return null
  }

  const clearActiveStream = () => {
    try {
      localStorage.removeItem('activeStream')
      console.log('üóëÔ∏è –û—á–∏—â–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∏–∑ localStorage')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –∏–∑ localStorage:', error)
    }
  }

  const restoreStreamState = async () => {
    const savedStream = getActiveStream()
    if (savedStream) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
        const response = await apiService.get(`/streams/${savedStream.id}`)
        if (response.data && response.data.is_active) {
          currentStream.value = response.data
          console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è:', response.data.id)
          return response.data
        } else {
          // –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –æ—á–∏—â–∞–µ–º localStorage
          clearActiveStream()
          console.log('‚ö†Ô∏è –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –æ—á–∏—â–µ–Ω localStorage')
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏:', error)
        clearActiveStream()
      }
    }
    return null
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    streams,
    currentStream,
    chatMessages,
    streamUsers,
    isLoading,
    isStreaming,
    viewerCount,
    
    // –ì–µ—Ç—Ç–µ—Ä—ã
    activeStreams,
    currentStreamMessages,
    onlineUsers,
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π
    fetchStreams,
    fetchStream,
    createStream,
    endStream,
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è localStorage
    saveActiveStream,
    getActiveStream,
    clearActiveStream,
    restoreStreamState,
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —á–∞—Ç–∞
    fetchChatMessages,
    setChatHistory,
    addChatMessage,
    sendChatMessage,
    sendSystemMessage,
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    addUserToStream,
    removeUserFromStream,
    clearStreamUsers,
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è WebRTC
    startStreaming,
    stopStreaming,
    updateViewerCount,
    
    // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    joinStream,
    leaveStream,
    
    // –û—á–∏—Å—Ç–∫–∞
    clearCurrentStream,
    clearState
  }
})

