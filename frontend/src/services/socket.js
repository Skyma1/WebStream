/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket (Socket.IO)
 */

import { io } from 'socket.io-client'
// –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç useAuthStore –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Vue
import { useStreamStore } from '@/store/stream'

class SocketService {
  constructor() {
    this.socket = null
    this.isConnected = false
    this.reconnectAttempts = 0
    this.maxReconnectAttempts = 10 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    this.reconnectDelay = 2000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    this.heartbeatInterval = null
    this.heartbeatTimeout = null
    this.heartbeatIntervalMs = 30000 // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    this.heartbeatTimeoutMs = 10000 // –¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞ 10 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
   */
  async connect(token) {
    try {
      if (this.socket && this.isConnected) {
        console.log('üîå WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
        return
      }

      const wsUrl = import.meta.env.VITE_WS_URL || 'ws://localhost:3000'
      
      this.socket = io(wsUrl, {
        transports: ['websocket', 'polling'],
        timeout: 10000,
        forceNew: true
      })

      this.setupEventHandlers()
      
      return new Promise((resolve, reject) => {
        this.socket.on('connect', () => {
          console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...')
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          this.socket.emit('authenticate', { token: token })
        })

        this.socket.on('authenticated', (data) => {
          if (data.success) {
            console.log('‚úÖ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', data.user.email)
            this.isConnected = true
            this.reconnectAttempts = 0
            this.startHeartbeat() // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
            resolve()
          } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket:', data.error)
            reject(new Error(data.error || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'))
          }
        })

        this.socket.on('connect_error', (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error)
          reject(error)
        })

        // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
          if (!this.isConnected) {
            reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket'))
          }
        }, 10000)
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error)
      throw error
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventHandlers() {
    if (!this.socket) return

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    this.socket.on('connect', () => {
      console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω')
      this.isConnected = true
      this.reconnectAttempts = 0
    })

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    this.socket.on('disconnect', (reason) => {
      console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', reason)
      this.isConnected = false
      
      if (reason === 'io server disconnect') {
        // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª –∫–ª–∏–µ–Ω—Ç–∞
        this.handleReconnect()
      }
    })

    // –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.socket.on('connect_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error)
      this.isConnected = false
      this.handleReconnect()
    })

    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    this.socket.on('authenticated', (data) => {
      if (data.success) {
        console.log('‚úÖ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket:', data.error)
      }
    })

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    this.socket.on('notification', (data) => {
      console.log('üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', data)
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    })

    // –°–æ–±—ã—Ç–∏—è —á–∞—Ç–∞
    this.socket.on('chat_history', (messages) => {
      const streamStore = useStreamStore()
      streamStore.setChatHistory(messages)
    })

    this.socket.on('new_chat_message', (message) => {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞:', message)
      const streamStore = useStreamStore()
      streamStore.addChatMessage(message)
    })

    this.socket.on('user_joined', (data) => {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', data)
      const streamStore = useStreamStore()
      streamStore.addUserToStream(data.user)
    })

    this.socket.on('user_left', (data) => {
      console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª:', data)
      const streamStore = useStreamStore()
      streamStore.removeUserFromStream(data.user.id)
    })

    // WebRTC —Å–æ–±—ã—Ç–∏—è
    this.socket.on('webrtc_offer', (data) => {
      console.log('üì° WebRTC Offer –ø–æ–ª—É—á–µ–Ω:', data)
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC offer
    })

    this.socket.on('webrtc_answer', (data) => {
      console.log('üì° WebRTC Answer –ø–æ–ª—É—á–µ–Ω:', data)
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC answer
    })

    this.socket.on('webrtc_ice_candidate', (data) => {
      console.log('üì° WebRTC ICE Candidate –ø–æ–ª—É—á–µ–Ω:', data)
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC ICE candidate
    })

    // Heartbeat –æ—Ç–≤–µ—Ç
    this.socket.on('pong', () => {
      if (this.heartbeatTimeout) {
        clearTimeout(this.heartbeatTimeout)
        this.heartbeatTimeout = null
      }
    })

    // –û—à–∏–±–∫–∏
    this.socket.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error)
    })
  }

  /**
   * –ó–∞–ø—É—Å–∫ heartbeat –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  startHeartbeat() {
    this.stopHeartbeat() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π heartbeat
    
    this.heartbeatInterval = setInterval(() => {
      if (!this.isConnected || !this.socket) {
        console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ')
        this.handleReconnect()
        return
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
      this.socket.emit('ping')
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
      this.heartbeatTimeout = setTimeout(() => {
        console.warn('‚ö†Ô∏è Heartbeat timeout, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è')
        this.isConnected = false
        this.handleReconnect()
      }, this.heartbeatTimeoutMs)
    }, this.heartbeatIntervalMs)
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ heartbeat
   */
  stopHeartbeat() {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval)
      this.heartbeatInterval = null
    }
    if (this.heartbeatTimeout) {
      clearTimeout(this.heartbeatTimeout)
      this.heartbeatTimeout = null
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  handleReconnect() {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
      return
    }

    this.reconnectAttempts++
    const delay = Math.min(this.reconnectDelay * Math.pow(1.5, this.reconnectAttempts - 1), 30000) // –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
    
    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay}ms`)
    
    setTimeout(() => {
      const token = localStorage.getItem('auth_token')
      if (token) {
        this.connect(token).catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error)
        })
      }
    }, delay)
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket
   */
  disconnect() {
    this.stopHeartbeat() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º heartbeat
    
    if (this.socket) {
      console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket')
      this.socket.disconnect()
      this.socket = null
      this.isConnected = false
      this.reconnectAttempts = 0
    }
  }

  /**
   * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
   */
  joinStream(streamId) {
    console.log('üîç joinStream –≤—ã–∑–≤–∞–Ω –¥–ª—è streamId:', streamId)
    console.log('üîç WebSocket socket:', !!this.socket)
    console.log('üîç WebSocket isConnected:', this.isConnected)
    
    if (!this.socket || !this.isConnected) {
      console.error('‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    console.log(`üì∫ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ ${streamId}`)
    this.socket.emit('join_stream', { streamId })
  }

  /**
   * –ü–æ–∫–∏–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
   */
  leaveStream(streamId) {
    if (!this.socket || !this.isConnected) {
      console.error('‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    console.log(`üì∫ –ü–æ–∫–∏–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ ${streamId}`)
    this.socket.emit('leave_stream', { streamId })
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
   */
  sendChatMessage(streamId, message) {
    if (!this.socket || !this.isConnected) {
      console.error('‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    if (!message || message.trim().length === 0) {
      console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
      return
    }

    console.log(`üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é ${streamId}:`, message)
    this.socket.emit('chat_message', { streamId, message: message.trim() })
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  sendSystemMessage(streamId, message) {
    if (!this.socket || !this.isConnected) {
      console.error('‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    console.log(`üîß –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é ${streamId}:`, message)
    this.socket.emit('system_message', { streamId, message })
  }

  /**
   * WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥
   */
  // WebRTC —Å–æ–±—ã—Ç–∏—è –¥–ª—è MediaSoup
  notifyNewProducer(streamId, producerId, kind) {
    if (!this.socket || !this.isConnected) {
      console.error('‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    console.log('üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø—Ä–æ–¥—é—Å–µ—Ä–µ')
    this.socket.emit('new_producer', { streamId, producerId, kind })
  }

  notifyProducerClosed(streamId, producerId) {
    if (!this.socket || !this.isConnected) {
      console.error('‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    console.log('üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–¥—é—Å–µ—Ä–∞')
    this.socket.emit('producer_closed', { streamId, producerId })
  }

  notifyConsumerClosed(streamId, consumerId) {
    if (!this.socket || !this.isConnected) {
      console.error('‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    console.log('üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞')
    this.socket.emit('consumer_closed', { streamId, consumerId })
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  getConnectionStatus() {
    return {
      isConnected: this.isConnected,
      reconnectAttempts: this.reconnectAttempts,
      socketId: this.socket?.id
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
   */
  on(event, callback) {
    if (this.socket) {
      this.socket.on(event, callback)
    }
  }

  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è
   */
  off(event, callback) {
    if (this.socket) {
      this.socket.off(event, callback)
    }
  }

  /**
   * –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è
   */
  emit(event, data) {
    if (this.socket && this.isConnected) {
      this.socket.emit(event, data)
    } else {
      console.error('‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ:', event)
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
const socketService = new SocketService()

export default socketService
