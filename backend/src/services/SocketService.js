/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Socket.IO
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ –∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π
 */

const jwt = require('jsonwebtoken');
const DatabaseService = require('./DatabaseService');

class SocketService {
    constructor(io, databaseService = null) {
        this.io = io;
        this.db = databaseService || new DatabaseService();
        this.connectedUsers = new Map(); // userId -> socketId
        this.streamRooms = new Map(); // streamId -> Set of socketIds
        this.userSessions = new Map(); // socketId -> userData
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π Socket.IO
     */
    setupEventHandlers() {
        this.io.on('connection', (socket) => {
            console.log(`üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);
            
            // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–æ–∫–µ—Ç–∞
            socket.on('error', (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞:', {
                    socketId: socket.id,
                    error: error.message || error,
                    stack: error.stack,
                    timestamp: new Date().toISOString()
                });
                // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            });

            // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            socket.on('authenticate', async (data) => {
                try {
                    const user = await this.authenticateUser(data.token);
                    if (user) {
                        this.userSessions.set(socket.id, user);
                        this.connectedUsers.set(user.id, socket.id);
                        
                        socket.emit('authenticated', {
                            success: true,
                            user: {
                                id: user.id,
                                email: user.email,
                                role: user.role
                            }
                        });
                        
                        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.email} (${user.role})`);
                    } else {
                        socket.emit('authenticated', { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
                    socket.emit('authenticated', { success: false, error: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' });
                }
            });

            // Heartbeat ping/pong
            socket.on('ping', () => {
                socket.emit('pong');
            });

            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
            socket.on('join_stream', async (data) => {
                try {
                    const user = this.userSessions.get(socket.id);
                    if (!user) {
                        socket.emit('error', { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' });
                        socket.disconnect();
                        return;
                    }

                    const { streamId } = data;
                    const roomName = `stream_${streamId}`;
                    
                    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
                    socket.join(roomName);
                    
                    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    const room = this.io.sockets.adapter.rooms.get(roomName);
                    const roomSize = room ? room.size : 0;
                    console.log(`üè† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomName} (–≤—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${roomSize})`);
                    
                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
                    if (!this.streamRooms.has(streamId)) {
                        this.streamRooms.set(streamId, new Set());
                    }
                    this.streamRooms.get(streamId).add(socket.id);

                    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
                    const chatHistory = await this.db.getChatMessages(streamId, 50);
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    const formattedHistory = chatHistory.map(msg => ({
                        id: msg.id,
                        stream_id: msg.stream_id,
                        message: msg.message,
                        user: {
                            email: msg.user_email,
                            role: msg.user_role
                        },
                        timestamp: msg.created_at
                    }));
                    socket.emit('chat_history', formattedHistory);

                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    socket.to(roomName).emit('user_joined', {
                        user: {
                            id: user.id,
                            email: user.email,
                            role: user.role
                        },
                        timestamp: new Date().toISOString()
                    });

                    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ ${streamId}`);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏:', error);
                    socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏' });
                    socket.disconnect();
                }
            });

            // –ü–æ–∫–∏–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
            socket.on('leave_stream', (data) => {
                const user = this.userSessions.get(socket.id);
                if (!user) return;

                const { streamId } = data;
                const roomName = `stream_${streamId}`;
                
                socket.leave(roomName);
                
                // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                if (this.streamRooms.has(streamId)) {
                    this.streamRooms.get(streamId).delete(socket.id);
                }

                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                socket.to(roomName).emit('user_left', {
                    user: {
                        id: user.id,
                        email: user.email,
                        role: user.role
                    },
                    timestamp: new Date().toISOString()
                });

                console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –ø–æ–∫–∏–Ω—É–ª —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é ${streamId}`);
            });

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
            socket.on('chat_message', async (data) => {
                try {
                    const user = this.userSessions.get(socket.id);
                    if (!user) {
                        socket.emit('error', { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' });
                        socket.disconnect();
                        return;
                    }

                    const { streamId, message } = data;
                    
                    if (!message || message.trim().length === 0) {
                        socket.emit('error', { message: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
                        return;
                    }

                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    const savedMessage = await this.db.saveChatMessage({
                        streamId,
                        userId: user.id,
                        message: message.trim(),
                        messageType: 'text'
                    });

                    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    const chatMessage = {
                        id: savedMessage.id,
                        stream_id: streamId,
                        message: message.trim(),
                        user: {
                            id: user.id,
                            email: user.email,
                            role: user.role
                        },
                        timestamp: savedMessage.created_at
                    };

                    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
                    const roomName = `stream_${streamId}`;
                    
                    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    const room = this.io.sockets.adapter.rooms.get(roomName);
                    const roomSize = room ? room.size : 0;
                    console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç—É ${roomName} (—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${roomSize})`);
                    
                    this.io.in(roomName).emit('new_chat_message', chatMessage);

                    console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.email} –≤ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ ${streamId}: ${message}`);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                    socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
                    socket.disconnect();
                }
            });

            // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            socket.on('system_message', async (data) => {
                try {
                    const user = this.userSessions.get(socket.id);
                    if (!user || user.role !== 'admin') {
                        socket.emit('error', { message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
                        socket.disconnect();
                        return;
                    }

                    const { streamId, message } = data;
                    
                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    const savedMessage = await this.db.saveChatMessage({
                        streamId,
                        userId: user.id,
                        message: message.trim(),
                        messageType: 'system'
                    });

                    const systemMessage = {
                        id: savedMessage.id,
                        message: message.trim(),
                        user: {
                            id: user.id,
                            email: user.email,
                            role: user.role
                        },
                        messageType: 'system',
                        timestamp: savedMessage.created_at
                    };

                    const roomName = `stream_${streamId}`;
                    this.io.to(roomName).emit('new_chat_message', systemMessage);

                    console.log(`üîß –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.email}: ${message}`);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                    socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' });
                    socket.disconnect();
                }
            });

            // WebRTC —Å–æ–±—ã—Ç–∏—è –¥–ª—è MediaSoup
            socket.on('new_producer', (data) => {
                const user = this.userSessions.get(socket.id);
                if (!user) return;

                const { streamId, producerId, kind } = data;
                const roomName = `stream_${streamId}`;
                
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑—Ä–∏—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–º –ø—Ä–æ–¥—é—Å–µ—Ä–µ
                socket.to(roomName).emit('new_producer', {
                    producerId,
                    kind,
                    from: user.id
                });

                console.log(`üì° –ù–æ–≤—ã–π –ø—Ä–æ–¥—é—Å–µ—Ä ${producerId} (${kind}) –≤ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ ${streamId}`);
            });

            socket.on('producer_closed', (data) => {
                const user = this.userSessions.get(socket.id);
                if (!user) return;

                const { streamId, producerId } = data;
                const roomName = `stream_${streamId}`;
                
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑—Ä–∏—Ç–µ–ª–µ–π –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
                socket.to(roomName).emit('producer_closed', {
                    producerId,
                    from: user.id
                });

                console.log(`üì° –ü—Ä–æ–¥—é—Å–µ—Ä ${producerId} –∑–∞–∫—Ä—ã—Ç –≤ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ ${streamId}`);
            });

            socket.on('consumer_closed', (data) => {
                const user = this.userSessions.get(socket.id);
                if (!user) return;

                const { streamId, consumerId } = data;
                const roomName = `stream_${streamId}`;
                
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞
                socket.to(roomName).emit('consumer_closed', {
                    consumerId,
                    from: user.id
                });

                console.log(`üì° –ö–æ–Ω—Å—å—é–º–µ—Ä ${consumerId} –∑–∞–∫—Ä—ã—Ç –≤ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ ${streamId}`);
            });

            // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            socket.on('disconnect', () => {
                const user = this.userSessions.get(socket.id);
                if (user) {
                    this.connectedUsers.delete(user.id);
                    this.userSessions.delete(socket.id);
                    
                    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π
                    for (const [streamId, socketIds] of this.streamRooms.entries()) {
                        if (socketIds.has(socket.id)) {
                            socketIds.delete(socket.id);
                            const roomName = `stream_${streamId}`;
                            socket.to(roomName).emit('user_left', {
                                user: {
                                    id: user.id,
                                    email: user.email,
                                    role: user.role
                                },
                                timestamp: new Date().toISOString()
                            });
                        }
                    }
                    
                    console.log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${user.email}`);
                }
            });
        });
    }

    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ JWT —Ç–æ–∫–µ–Ω—É
     */
    async authenticateUser(token) {
        try {
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            const user = await this.db.findUserById(decoded.userId);
            return user;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            return null;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
     */
    broadcastNotification(message, type = 'info') {
        this.io.emit('notification', {
            message,
            type,
            timestamp: new Date().toISOString()
        });
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª–∏
     */
    broadcastToRole(role, message, type = 'info') {
        for (const [socketId, user] of this.userSessions.entries()) {
            if (user.role === role) {
                this.io.to(socketId).emit('notification', {
                    message,
                    type,
                    timestamp: new Date().toISOString()
                });
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
     */
    getConnectionStats() {
        return {
            totalConnections: this.io.engine.clientsCount,
            authenticatedUsers: this.userSessions.size,
            activeStreams: this.streamRooms.size,
            usersByRole: this.getUsersByRole()
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
     */
    getUsersByRole() {
        const roles = {};
        for (const user of this.userSessions.values()) {
            roles[user.role] = (roles[user.role] || 0) + 1;
        }
        return roles;
    }
}

module.exports = SocketService;
