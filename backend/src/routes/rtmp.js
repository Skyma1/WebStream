/**
 * RTMP –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è OBS —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
 */

const express = require('express');
const router = express.Router();
const { body, validationResult } = require('express-validator');

/**
 * @swagger
 * /api/streams/rtmp/start:
 *   post:
 *     summary: –ù–∞—á–∞–ª–æ RTMP —Å—Ç—Ä–∏–º–∞
 *     tags: [RTMP]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 description: –ò–º—è —Å—Ç—Ä–∏–º–∞
 *               addr:
 *                 type: string
 *                 description: IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
 *     responses:
 *       200:
 *         description: –°—Ç—Ä–∏–º –Ω–∞—á–∞—Ç
 */
router.post('/start', async (req, res) => {
    try {
        const { name, addr } = req.body;
        
        console.log(`üé¨ RTMP —Å—Ç—Ä–∏–º –Ω–∞—á–∞—Ç: ${name} –æ—Ç ${addr}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤ –ë–î
        const streamId = parseInt(name);
        if (streamId && !isNaN(streamId)) {
            const updateQuery = `
                UPDATE streams 
                SET is_active = true, started_at = CURRENT_TIMESTAMP 
                WHERE id = $1
            `;
            await req.app.locals.databaseService.query(updateQuery, [streamId]);
            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ ${streamId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π`);
        }
        
        res.json({ 
            success: true, 
            message: 'RTMP —Å—Ç—Ä–∏–º –Ω–∞—á–∞—Ç',
            streamName: name 
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ RTMP —Å—Ç—Ä–∏–º–∞:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            code: 'RTMP_START_ERROR'
        });
    }
});

/**
 * @swagger
 * /api/streams/rtmp/stop:
 *   post:
 *     summary: –û–∫–æ–Ω—á–∞–Ω–∏–µ RTMP —Å—Ç—Ä–∏–º–∞
 *     tags: [RTMP]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 description: –ò–º—è —Å—Ç—Ä–∏–º–∞
 *               addr:
 *                 type: string
 *                 description: IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
 *     responses:
 *       200:
 *         description: –°—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
 */
router.post('/stop', async (req, res) => {
    try {
        const { name, addr } = req.body;
        
        console.log(`‚èπÔ∏è RTMP —Å—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${name} –æ—Ç ${addr}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤ –ë–î
        const streamId = parseInt(name);
        if (streamId && !isNaN(streamId)) {
            const updateQuery = `
                UPDATE streams 
                SET is_active = false, ended_at = CURRENT_TIMESTAMP 
                WHERE id = $1
            `;
            await req.app.locals.databaseService.query(updateQuery, [streamId]);
            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ ${streamId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π`);
        }
        
        res.json({ 
            success: true, 
            message: 'RTMP —Å—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            streamName: name 
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ RTMP —Å—Ç—Ä–∏–º–∞:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            code: 'RTMP_STOP_ERROR'
        });
    }
});

/**
 * @swagger
 * /api/streams/rtmp/status:
 *   get:
 *     summary: –°—Ç–∞—Ç—É—Å RTMP —Å—Ç—Ä–∏–º–æ–≤
 *     tags: [RTMP]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–æ–≤
 */
router.get('/status', async (req, res) => {
    try {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        // –∞–∫—Ç–∏–≤–Ω—ã—Ö RTMP —Å—Ç—Ä–∏–º–æ–≤
        
        res.json({
            success: true,
            activeStreams: [],
            message: 'RTMP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç'
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ RTMP:', error);
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            code: 'RTMP_STATUS_ERROR'
        });
    }
});

module.exports = router;

