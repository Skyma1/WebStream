/**
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è WebStream
 * –ó–∞–∫—Ä—ã—Ç—ã–π —Å–∞–π—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π
 */

const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
const authRoutes = require('./routes/auth');
const adminRoutes = require('./routes/admin');
const streamRoutes = require('./routes/streams');
const userRoutes = require('./routes/users');
const rtmpRoutes = require('./routes/rtmp');

// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
const DatabaseService = require('./services/DatabaseService');
const SocketService = require('./services/SocketService');
const MediaSoupService = require('./services/MediaSoupService');

// –ò–º–ø–æ—Ä—Ç middleware
const authMiddleware = require('./middleware/auth');
const { errorHandler } = require('./middleware/errorHandler');

// –ò–º–ø–æ—Ä—Ç Swagger
const swaggerConfig = require('./config/swagger');

class WebStreamApp {
    constructor() {
        this.app = express();
        this.server = http.createServer(this.app);
        this.io = socketIo(this.server, {
            cors: {
                origin: [
                    process.env.FRONTEND_URL || "http://localhost:8080",
                    "http://frontend:8080",
                    "http://151.241.228.125:8081",
                    "http://151.241.228.125"
                ],
                methods: ["GET", "POST"],
                credentials: true
            }
        });
        
        this.port = process.env.PORT || 3000;
        this.databaseService = new DatabaseService();
        this.mediaSoupService = new MediaSoupService();
        this.socketService = new SocketService(this.io, this.databaseService);
        
        this.setupMiddleware();
        this.setupRoutes();
        this.setupErrorHandling();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
     */
    setupMiddleware() {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ CORS)
        // this.app.use(helmet({
        //     contentSecurityPolicy: {
        //         directives: {
        //             defaultSrc: ["'self'"],
        //             styleSrc: ["'self'", "'unsafe-inline'"],
        //             scriptSrc: ["'self'"],
        //             imgSrc: ["'self'", "data:", "https:"],
        //             connectSrc: ["'self'", "ws:", "wss:"]
        //         }
        //     }
        // }));

        // CORS
        const allowedOrigins = [
            process.env.FRONTEND_URL || "http://localhost:8080",
            "http://frontend:8080",
            "http://151.241.228.125:8081",
            "http://151.241.228.125:8080",
            "http://151.241.228.125",
            "http://localhost:8081",
            "http://localhost:8080"
        ];
        
        this.app.use(cors({
            origin: function(origin, callback) {
                // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ curl)
                if (!origin) return callback(null, true);
                
                if (allowedOrigins.indexOf(origin) !== -1 || process.env.NODE_ENV === 'development') {
                    callback(null, true);
                } else {
                    console.warn('‚ö†Ô∏è CORS blocked origin:', origin);
                    callback(null, true); // –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                }
            },
            credentials: true,
            methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
            allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
        }));

        // Rate limiting
        const limiter = rateLimit({
            windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
            max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
            message: {
                error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
                code: 'RATE_LIMIT_EXCEEDED'
            }
        });
        this.app.use('/api/', limiter);

        // –ü–∞—Ä—Å–∏–Ω–≥ JSON
        this.app.use(express.json({ limit: '10mb' }));
        this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        this.app.use((req, res, next) => {
            console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
            next();
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
     */
    setupRoutes() {
        // Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        this.app.use('/api-docs', swaggerConfig.swaggerUi.serve, swaggerConfig.swaggerUi.setup(swaggerConfig.swaggerSpec, swaggerConfig.swaggerUiOptions));

        // API –º–∞—Ä—à—Ä—É—Ç—ã
        this.app.use('/api/auth', authRoutes);
        this.app.use('/api/admin', authMiddleware.requireAuth, authMiddleware.requireRole(['admin']), adminRoutes);

        // –í–ê–ñ–ù–û: RTMP —Ö—É–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –î–û –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö /api/streams,
        // —á—Ç–æ–±—ã –∏—Ö –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª–æ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        this.app.use('/api/streams/rtmp', rtmpRoutes); // RTMP –º–∞—Ä—à—Ä—É—Ç—ã –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

        this.app.use('/api/streams', authMiddleware.requireAuth, streamRoutes);
        this.app.use('/api/users', authMiddleware.requireAuth, userRoutes);

        // –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ HLS –ø–æ—Ç–æ–∫–æ–≤ –æ—Ç nginx
        this.app.get('/hls/:streamName/:filename', async (req, res) => {
            const { streamName, filename } = req.params;
            const nginxUrl = `http://nginx:80/hls/${streamName}/${filename}`;
            
            try {
                const response = await fetch(nginxUrl);
                if (!response.ok) {
                    return res.status(404).json({ error: 'Stream not found' });
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HLS
                res.set({
                    'Content-Type': response.headers.get('content-type') || 'application/vnd.apple.mpegurl',
                    'Cache-Control': 'no-cache',
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'GET',
                    'Access-Control-Allow-Headers': 'Range'
                });
                
                response.body.pipe(res);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è HLS:', error);
                res.status(500).json({ error: 'Internal server error' });
            }
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
        this.app.get('/health', (req, res) => {
            res.json({
                status: 'OK',
                timestamp: new Date().toISOString(),
                uptime: process.uptime(),
                version: process.env.npm_package_version || '1.0.0'
            });
        });

        // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API
        this.app.get('/api', (req, res) => {
            res.json({
                message: 'WebStream API - –ó–∞–∫—Ä—ã—Ç—ã–π —Å–∞–π—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π',
                version: '1.0.0',
                documentation: '/api-docs',
                endpoints: {
                    auth: '/api/auth',
                    admin: '/api/admin',
                    streams: '/api/streams',
                    users: '/api/users'
                }
            });
        });

        // 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        this.app.use('*', (req, res) => {
            res.status(404).json({
                error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                code: 'ROUTE_NOT_FOUND',
                path: req.originalUrl
            });
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
     */
    setupErrorHandling() {
        this.app.use(errorHandler);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    async initializeServices() {
        try {
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...');
            
            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await this.databaseService.connect();
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaSoup –¥–ª—è WebRTC (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try {
            await this.mediaSoupService.initialize();
            console.log('‚úÖ MediaSoup –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.warn('‚ö†Ô∏è MediaSoup –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, WebRTC —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', error.message);
            console.log('üì∫ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è RTMP + HLS —Å—Ç—Ä–∏–º–∏–Ω–≥ (OBS)');
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ app.locals –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö
        this.app.locals.mediaSoupService = this.mediaSoupService;
        this.app.locals.databaseService = this.databaseService;
        this.app.locals.socketService = this.socketService;

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO
            this.socketService.setupEventHandlers();
            console.log('‚úÖ Socket.IO –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

            console.log('üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async start() {
        try {
            await this.initializeServices();
            
            this.server.listen(this.port, () => {
                console.log(`
üöÄ WebStream Server –∑–∞–ø—É—â–µ–Ω!
üì° –ü–æ—Ä—Ç: ${this.port}
üåê API: http://localhost:${this.port}/api
üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:${this.port}/api-docs
üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://localhost:${this.port}/health
                `);
            });

            // Graceful shutdown
            process.on('SIGTERM', () => this.shutdown());
            process.on('SIGINT', () => this.shutdown());

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
            process.exit(1);
        }
    }

    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
     */
    async shutdown() {
        console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...');
        
        try {
            // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
            this.server.close(() => {
                console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
            });

            // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            await this.databaseService.disconnect();
            console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');

            await this.mediaSoupService.cleanup();
            console.log('‚úÖ MediaSoup –æ—á–∏—â–µ–Ω');

            console.log('üëã –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É');
            process.exit(0);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
            process.exit(1);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new WebStreamApp();
app.start();

module.exports = app;
